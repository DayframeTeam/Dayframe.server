const subtaskModel = require('../models/subtaskModel');
const taskModel = require('../models/taskModel');
const taskController = require('./taskController');

exports.getAllByUserId = (req, res) => {
  const userId = Number(req.headers['user-id']);

  if (!userId) {
    return res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω user-id –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ' });
  }

  subtaskModel
    .getAllSubtasksByUser(userId)
    .then(([rows]) => res.json(rows))
    .catch((err) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á:', err);
      res.status(500).json({ error: err.message });
    });
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –ø–æ parent_task_id
exports.getAllByParentTaskId = (req, res) => {
  const parentTaskId = Number(req.params.id);

  if (!parentTaskId) {
    return res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω parent_task_id' });
  }

  subtaskModel
    .getAllByParentId(parentTaskId)
    .then(([rows]) => res.json(rows))
    .catch((err) => res.status(500).json({ error: err.message }));
};

exports.createSubtask = (req, res) => {
  const subtask = req.body;
  const userId = Number(req.headers['user-id']);

  if (!subtask || !subtask.parent_task_id || !subtask.title) {
    return res
      .status(400)
      .json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è: parent_task_id, title' });
  }

  subtaskModel
    .addSubtask(userId, subtask)
    .then(([result]) =>
      taskModel
        .updateStatusBySubtasks(subtask.parent_task_id)
        .then(() => taskController.getFullTaskById(subtask.parent_task_id)),
    )
    .then((task) => {
      if (!task) {
        return res
          .status(404)
          .json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
      }
      res.status(201).json(task);
    })
    .catch((err) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: err.message });
    });
};

exports.deleteSubtask = (req, res) => {
  const subtaskId = Number(req.params.id);

  if (!subtaskId) {
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–¥–∑–∞–¥–∞—á–∏' });
  }

  subtaskModel
    .getSubtaskById(subtaskId)
    .then(([rows]) => {
      if (!rows || rows.length === 0) {
        return res.status(404).json({ error: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      const parentTaskId = rows[0].parent_task_id;

      return subtaskModel
        .deleteSubtaskById(subtaskId)
        .then(() => taskModel.updateStatusBySubtasks(parentTaskId))
        .then(() => taskController.getFullTaskById(parentTaskId));
    })
    .then((task) => {
      if (!task) {
        return res
          .status(404)
          .json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
      }
      res.json(task);
    })
    .catch((err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    });
};

exports.updateSubtaskStatus = (req, res) => {
  const subtaskId = Number(req.params.id);
  const { is_done } = req.body;

  if (typeof is_done !== 'boolean') {
    return res.status(400).json({ error: '–ü–æ–ª–µ is_done –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean' });
  }

  subtaskModel
    .getSubtaskById(subtaskId)
    .then(([rows]) => {
      if (!rows.length) {
        return res.status(404).json({ error: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      const parentTaskId = rows[0].parent_task_id;

      return subtaskModel
        .updateSubtaskStatus(subtaskId, is_done)
        .then(() => taskModel.updateStatusBySubtasks(parentTaskId))
        .then(() => taskController.getFullTaskById(parentTaskId));
    })
    .then((task) => {
      if (!task) {
        return res
          .status(404)
          .json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
      }
      res.json(task);
    })
    .catch((err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    });
};

exports.updateSubtask = (req, res) => {
  const subtaskId = Number(req.params.id);
  const { title, position } = req.body;

  if (typeof title !== 'string' || typeof position !== 'number') {
    return res.status(400).json({
      error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–æ–ª—è: title –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, position ‚Äî —á–∏—Å–ª–æ–º',
    });
  }

  subtaskModel
    .getSubtaskById(subtaskId)
    .then(([rows]) => {
      if (!rows.length) {
        return res.status(404).json({ error: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      const parentTaskId = rows[0].parent_task_id;

      return subtaskModel
        .updateSubtask(subtaskId, title, position)
        .then(() => taskController.getFullTaskById(parentTaskId));
    })
    .then((task) => {
      if (!task) {
        return res
          .status(404)
          .json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
      }
      res.json(task);
    })
    .catch((err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    });
};
