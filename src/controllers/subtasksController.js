const subtaskModel = require('../models/subtaskModel');
const taskController = require('./taskController');

exports.getAllByUserId = (req, res) => {
  const userId = Number(req.headers['user-id']);

  if (!userId) {
    return res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω user-id –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ' });
  }

  subtaskModel
    .getSubtasksAllByUserId(userId)
    .then(([result]) => {
      if (result.affectedRows === 0) {
        return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
      return taskController.getFullTaskById(taskId);
    })
    .catch((err) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á:', err);
      res.status(500).json({ error: err.message });
    });
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –ø–æ parent_task_id
exports.getAllByParentTaskId = (req, res) => {
  const parentTaskId = Number(req.params.id);

  if (!parentTaskId) {
    return res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω parent_task_id' });
  }
  taskController.getFullTaskById(parentTaskId);
};

exports.createSubtask = (req, res) => {
  const subtask = req.body;
  const userId = Number(req.headers['user-id']);

  if (!subtask || !subtask.parent_task_id || !subtask.title) {
    return res
      .status(400)
      .json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è: parent_task_id, title' });
  }

  subtaskModel
    .addSubtask(userId, subtask)
    .then(([result]) =>
      taskController
        .updateStatusBySubtasks(subtask.parent_task_id)
        .then(() => taskController.getFullTaskById(subtask.parent_task_id)),
    )
    .then((task) => {
      if (!task) {
        return res
          .status(404)
          .json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
      }
      res.status(201).json(task);
    })
    .catch((err) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: err.message });
    });
};

exports.deleteSubtask = (req, res) => {
  const subtaskId = Number(req.params.id);
  const parentTaskId = Number(req.body.parent_task_id);

  if (!subtaskId || !parentTaskId) {
    return res
      .status(400)
      .json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∏' });
  }

  subtaskModel
    .deleteSubtaskById(subtaskId)
    .then(([result]) => {
      if (result.affectedRows === 0) {
        return res
          .status(404)
          .json({ error: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞' });
      }

      return taskController
        .updateStatusBySubtasks(parentTaskId)
        .then(() => taskController.getFullTaskById(parentTaskId));
    })
    .then((task) => {
      if (!task) {
        return res
          .status(404)
          .json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
      }

      res.json(task);
    })
    .catch((err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    });
};

exports.updateSubtaskStatus = (req, res) => {
  const subtaskId = Number(req.params.id);
  const { is_done } = req.body;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (typeof is_done !== 'boolean') {
    return res
      .status(400)
      .json({ error: '–ü–æ–ª–µ is_done –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean (true/false)' });
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É –ø–æ –µ—ë ID
  subtaskModel
    .getSubtaskById(subtaskId)
    .then(([rows]) => {
      if (!rows.length) {
        return res.status(404).json({ error: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      const parentTaskId = rows[0].parent_task_id;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏
      return subtaskModel.updateSubtaskStatus(subtaskId, is_done).then(() => {
        // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏ ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏
        return taskController.updateStatusBySubtasks(parentTaskId, req, res);
      });
    })
    .catch((err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    });
};

exports.updateSubtask = (req, res) => {
  const subtaskId = Number(req.params.id);
  const { title, position, parent_task_id } = req.body;

  if (
    typeof title !== 'string' ||
    typeof position !== 'number' ||
    typeof parent_task_id !== 'number'
  ) {
    return res.status(400).json({
      error:
        '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–æ–ª—è: title –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, position ‚Äî —á–∏—Å–ª–æ–º, parent_task_id ‚Äî —á–∏—Å–ª–æ–º',
    });
  }

  subtaskModel
    .updateSubtask(subtaskId, title, position)
    .then(([result]) => {
      if (result.affectedRows === 0) {
        return res.status(404).json({ error: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      return taskController.getFullTaskById(parent_task_id);
    })
    .then((task) => {
      if (!task) {
        return res
          .status(404)
          .json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
      }

      res.json(task);
    })
    .catch((err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    });
};
